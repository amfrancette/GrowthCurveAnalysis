write.csv(rownames(Res_DownReg$cdc73DvsWt_4tU), file = "DELists/cdc73DvsWt_4tU_Downreg.txt", quote = F, row.names = FALSE)
write.csv(rownames(Res_DownReg$leo1DvsWt_4tU), file = "DELists/leo1DvsWt_4tU_Downreg.txt", quote = F, row.names = FALSE)
Res_DownReg
c("paf1DvsWt_4tU" =rownames(Res_DownReg$paf1DvsWt_4tU), "ctr9DvsWt_4tU" = rownames(Res_DownReg$ctr9DvsWt_4tU), "rtf1DvsWt_4tU" = rownames(Res_DownReg$rtf1DvsWt_4tU), "cdc73DvsWt_4tU" =rownames(Res_DownReg$cdc73DvsWt_4tU), "leo1DvsWt_4tU" = rownames(Res_DownReg$leo1DvsWt_4tU))
Res_DownReg_names <- c("paf1DvsWt_4tU" =rownames(Res_DownReg$paf1DvsWt_4tU), "ctr9DvsWt_4tU" = rownames(Res_DownReg$ctr9DvsWt_4tU), "rtf1DvsWt_4tU" = rownames(Res_DownReg$rtf1DvsWt_4tU), "cdc73DvsWt_4tU" =rownames(Res_DownReg$cdc73DvsWt_4tU), "leo1DvsWt_4tU" = rownames(Res_DownReg$leo1DvsWt_4tU))
plot(euler(Res_DownReg_names, shape = "circle"), quantities = TRUE, col = "black", fill = cols, adjust_labels = TRUE)
Res_DownReg_names <- list("paf1DvsWt_4tU" =rownames(Res_DownReg$paf1DvsWt_4tU), "ctr9DvsWt_4tU" = rownames(Res_DownReg$ctr9DvsWt_4tU), "rtf1DvsWt_4tU" = rownames(Res_DownReg$rtf1DvsWt_4tU), "cdc73DvsWt_4tU" =rownames(Res_DownReg$cdc73DvsWt_4tU), "leo1DvsWt_4tU" = rownames(Res_DownReg$leo1DvsWt_4tU))
plot(euler(Res_DownReg_names, shape = "circle"), quantities = TRUE, col = "black", fill = cols, adjust_labels = TRUE)
?euler
cols
plot(euler(Res_DownReg_names, shape = "circle"), quantities = TRUE, col = "black", fill = cols, adjust_labels = TRUE)
Res_DownReg4tU_names <- list("paf1DvsWt" =rownames(Res_DownReg$paf1DvsWt_4tU), "ctr9DvsWt" = rownames(Res_DownReg$ctr9DvsWt_4tU), "rtf1DvsWt" = rownames(Res_DownReg$rtf1DvsWt_4tU), "cdc73DvsWt" =rownames(Res_DownReg$cdc73DvsWt_4tU), "leo1DvsWt" = rownames(Res_DownReg$leo1DvsWt_4tU))
plot(euler(Res_DownReg_names, shape = "circle"), quantities = TRUE, col = "black", fill = cols, adjust_labels = TRUE)
# setting the preferred order of conditions/bioreps early on makes plotting downstream easier
cols <- c("Blank" =  "grey", "Wt" =  "grey60",
"Wt_4tU" =  "grey60", "paf1D_4tU" = "#9B921F", "rtf1D_4tU" = "#2B6A32",
"ctr9D_4tU"= "#A67831",  "cdc73D_4tU" = "#3D6394",
"leo1D_4tU" = "#8E2A8B",
"Wt_Total" =  "grey60", "paf1D_Total" = "#9B921F",  "rtf1D_Total" = "#2B6A32",
"htz1D_Total" = "#117864", "ctr9D_Total" = "#A67831",  "cdc73D_Total" = "#3D6394",
"leo1D_Total" = "#8E2A8B",
"Paf1-AID" = "#F5E733", "Paf1-AID-osTIR" = "#D1C52A", "paf1D" = "#9B921F",
"Rtf1-AID" = "#55CA61", "Rtf1-AID-osTIR" = "#409B4A",  "rtf1D" = "#2B6A32",
"Ctr9-AID" = "#F7AE3F", "Ctr9-AID-osTIR" = "#CC9239",  "ctr9D" = "#A67831",
"Cdc73-AID" = "#549EFC","Cdc73-AID-osTIR" = "#4586D9",  "cdc73D" = "#3D6394",
"Leo1-AID" = "#EE46E9","Leo1-AID-osTIR" = "#CE3ECA",  "leo1D" = "#8E2A8B",
"WTos_Veh" =  "grey40", "WTos_IAA" =  "grey70",
"Paf1_Veh" = "#D1C52A", "Paf1_IAA" = "#F5E733",
"Rtf1_Veh" = "#409B4A", "Rtf1_IAA" = "#55CA61",
"Ctr9_Veh" = "#CC9239", "Ctr9_IAA" = "#F7AE3F",
"Cdc73_Veh" = "#4586D9","Cdc73_IAA" = "#549EFC",
"Leo1_Veh" = "#CE3ECA","Leo1_IAA" = "#EE46E9",
"paf1DvsWt" =  "#9B921F", "ctr9DvsWt"= "#A67831", "rtf1DvsWt"= "#2B6A32", "cdc73DvsWt"= "#3D6394",
"leo1DvsWt"= "#8E2A8B", "WTos_IAAvsVeh"=  "grey40", "Paf1_IAAvsVeh"= "#F5E733", "Rtf1_IAAvsVeh" = "#55CA61",
"Paf1vsWtosVeh"= "#F5E733", "Rtf1vsWtosVeh" = "#55CA61",
"htz1D_Rtf1-AID" = "#48C9B0", "htz1D_Rtf1-AID-osTIR" = "#17A589", "htz1D" = "#117864",
"1" = "black", "2" = "red", "3" = "blue", "4" = "green", "PLACEHOLDER" = "grey40")
plot(euler(Res_DownReg_names, shape = "circle"), quantities = TRUE, col = "black", fill = cols, adjust_labels = TRUE)
Res_DownReg4tU_names <- list("paf1DvsWt" =rownames(Res_DownReg$paf1DvsWt_4tU), "ctr9DvsWt" = rownames(Res_DownReg$ctr9DvsWt_4tU), "rtf1DvsWt" = rownames(Res_DownReg$rtf1DvsWt_4tU), "cdc73DvsWt" =rownames(Res_DownReg$cdc73DvsWt_4tU), "leo1DvsWt" = rownames(Res_DownReg$leo1DvsWt_4tU))
plot(euler(Res_DownReg_names, shape = "circle"), quantities = TRUE, col = "black", fill = cols, adjust_labels = TRUE)
Res_DownReg4tU_names
plot(euler(Res_DownReg_names, shape = "circle"), quantities = TRUE, col = "black", fill = cols, adjust_labels = TRUE)
Res_DownReg4tU_names <- list("paf1DvsWt" = rownames(Res_DownReg$paf1DvsWt_4tU), "ctr9DvsWt" = rownames(Res_DownReg$ctr9DvsWt_4tU), "rtf1DvsWt" = rownames(Res_DownReg$rtf1DvsWt_4tU), "cdc73DvsWt" = rownames(Res_DownReg$cdc73DvsWt_4tU), "leo1DvsWt" = rownames(Res_DownReg$leo1DvsWt_4tU))
plot(euler(Res_DownReg_names, shape = "circle"), quantities = TRUE, col = "black", fill = cols, adjust_labels = TRUE)
plot(euler(Res_DownReg_names, shape = "square"), quantities = TRUE, col = "black", fill = cols, adjust_labels = TRUE)
plot(euler(Res_DownReg_names, shape = "ellipse"), quantities = TRUE, col = "black", fill = cols, adjust_labels = TRUE)
Res_DownReg_names
plot(euler(Res_DownReg4tU_names, shape = "ellipse"), quantities = TRUE, col = "black", fill = cols, adjust_labels = TRUE)
Res_UpReg <- list("paf1DvsWt_4tU" = filter(data.frame(list_DEseqAnalysis[["mRNA"]]$Res_4tU[]$paf1DvsWt_4tU), log2FoldChange > .59 & padj < 0.05),
"ctr9DvsWt_4tU" = filter(data.frame(list_DEseqAnalysis[["mRNA"]]$Res_4tU[]$ctr9DvsWt_4tU), log2FoldChange > .59 & padj < 0.05),
"rtf1DvsWt_4tU" = filter(data.frame(list_DEseqAnalysis[["mRNA"]]$Res_4tU[]$rtf1DvsWt_4tU), log2FoldChange > .59 & padj < 0.05),
"cdc73DvsWt_4tU" = filter(data.frame(list_DEseqAnalysis[["mRNA"]]$Res_4tU[]$cdc73DvsWt_4tU), log2FoldChange > .59 & padj < 0.05),
"leo1DvsWt_4tU" = filter(data.frame(list_DEseqAnalysis[["mRNA"]]$Res_4tU[]$leo1DvsWt_4tU), log2FoldChange > .59 & padj < 0.05))
Res_UpReg4tU_names <- list("paf1DvsWt" = rownames(Res_UpReg$paf1DvsWt_4tU), "ctr9DvsWt" = rownames(Res_UpReg$ctr9DvsWt_4tU), "rtf1DvsWt" = rownames(Res_UpReg$rtf1DvsWt_4tU), "cdc73DvsWt" = rownames(Res_UpReg$cdc73DvsWt_4tU), "leo1DvsWt" = rownames(Res_UpReg$leo1DvsWt_4tU))
plot(euler(Res_UpReg4tU_names, shape = "ellipse"), quantities = TRUE, col = "black", fill = cols, adjust_labels = TRUE)
plot(euler(Res_DownReg4tU_names, shape = "ellipse"), quantities = TRUE, col = "black", fill = cols, adjust_labels = TRUE)
plot(euler(Res_UpReg4tU_names, shape = "ellipse"), quantities = TRUE, col = "black", adjust_labels = TRUE)
plot(euler(Res_DownReg4tU_names, shape = "ellipse"), quantities = TRUE, col = "black", adjust_labels = TRUE)
plot(euler(Res_DownReg4tU_names, shape = "ellipse"), quantities = TRUE, col = "black", adjust_labels = TRUE)
plot(euler(Res_UpReg4tU_names, shape = "ellipse"), quantities = TRUE, col = "black", adjust_labels = TRUE)
setwd("/Users/amf198/OneDrive - University of Pittsburgh/BioinformaticsFiles/OvationBatch4.1/DESeq2/")
# This directs to DESeq2 and Rsubread manual
#browseVignettes("DESeq2")
#RsubreadUsersGuide()
library(Rsubread)
library(pheatmap)
library(DESeq2)
library(ggplot2)
library(dplyr)
library(GGally)
library(eulerr)
library(UpSetR)
library(EnhancedVolcano)
library(ggrepel)
library(tidyverse)
library(ggforce)
library(gridExtra)
set.seed(1)
sampleOrder <- c("Wtos_Veh_Rep1", "Wtos_Veh_Rep2","Wtos_Aux_Rep1", "Wtos_Aux_Rep2",
"Paf1_Veh_Rep1", "Paf1_Veh_Rep2", "Paf1_Aux_Rep1", "Paf1_Aux_Rep2",
"Ctr9_Veh_Rep1", "Ctr9_Veh_Rep2","Ctr9_Aux_Rep1","Ctr9_Aux_Rep2",
"Rtf1_Veh_Rep1", "Rtf1_Veh_Rep2", "Rtf1_Aux_Rep1","Rtf1_Aux_Rep2",
"Cdc73_Veh_Rep1", "Cdc73_Veh_Rep2", "Cdc73_Aux_Rep1", "Cdc73_Aux_Rep2",
"Leo1_Veh_Rep1", "Leo1_Veh_Rep2", "Leo1_Aux_Rep1", "Leo1_Aux_Rep2",
"Wtos_Veh", "Wtos_Aux", "Paf1_Veh", "Paf1_Aux",
"Ctr9_Veh","Ctr9_Aux","Rtf1_Veh", "Rtf1_Aux",
"Cdc73_Veh", "Cdc73_Aux", "Leo1_Veh",  "Leo1_Aux",
"Wtos_AuxvsVeh", "Paf1_AuxvsVeh", "Ctr9_AuxvsVeh" ,
"Rtf1_AuxvsVeh", "Cdc73_AuxvsVeh" , "Leo1_AuxvsVeh",
"Wtos", "Paf1", "Ctr9", "Rtf1", "Cdc73", "Leo1" )
AIDBioReps <- c("Wtos_Veh_Rep1", "Wtos_Veh_Rep2","Wtos_Aux_Rep1", "Wtos_Aux_Rep2",
"Paf1_Veh_Rep1", "Paf1_Veh_Rep2", "Paf1_Aux_Rep1", "Paf1_Aux_Rep2",
"Ctr9_Veh_Rep1", "Ctr9_Veh_Rep2","Ctr9_Aux_Rep1","Ctr9_Aux_Rep2",
"Rtf1_Veh_Rep1", "Rtf1_Veh_Rep2", "Rtf1_Aux_Rep1","Rtf1_Aux_Rep2",
"Cdc73_Veh_Rep1", "Cdc73_Veh_Rep2", "Cdc73_Aux_Rep1", "Cdc73_Aux_Rep2",
"Leo1_Veh_Rep1", "Leo1_Veh_Rep2", "Leo1_Aux_Rep1", "Leo1_Aux_Rep2")
relativeCelltoOD600 <- c("Wt" =	1.00, "paf1D" = 	0.49, "ctr9D" = 	0.48,
"rtf1D" = 	0.79, "cdc73D" =	0.77, "leo1D"	= 0.91,
"htz1D" = 	0.92, "Wtos" = 0.90, "Paf1" = 0.86,
"Ctr9" = 0.93, "Rtf1" = 0.84, "Cdc73" = 0.80,
"Leo1" = 0.91, "Rtf1_htz1D" = 0.53)
cols <- c("Wtos_Veh_Rep1" ="grey70", "Wtos_Veh_Rep2" ="grey70", "Wtos_Aux_Rep1" ="grey40", "Wtos_Aux_Rep2" ="grey40",
"Paf1_Veh_Rep1" = "#F5E733", "Paf1_Veh_Rep2" = "#F5E733", "Paf1_Aux_Rep1" = "#D1C52A", "Paf1_Aux_Rep2" = "#D1C52A",
"Ctr9_Veh_Rep1" = "#F7AE3F", "Ctr9_Veh_Rep2" = "#F7AE3F", "Ctr9_Aux_Rep1" = "#CC9239", "Ctr9_Aux_Rep2" = "#CC9239",
"Rtf1_Veh_Rep1" = "#55CA61", "Rtf1_Veh_Rep2" = "#55CA61", "Rtf1_Aux_Rep1" = "#409B4A", "Rtf1_Aux_Rep2" = "#409B4A",
"Cdc73_Veh_Rep1" = "#549EFC", "Cdc73_Veh_Rep2" = "#549EFC", "Cdc73_Aux_Rep1" = "#4586D9", "Cdc73_Aux_Rep2" = "#4586D9",
"Leo1_Veh_Rep1" = "#EE46E9", "Leo1_Veh_Rep2" = "#EE46E9", "Leo1_Aux_Rep1" = "#CE3ECA", "Leo1_Aux_Rep2" = "#CE3ECA",
"Wtos_Veh" ="grey70", "Wtos_Aux" ="grey40", "Paf1_Veh" = "#F5E733", "Paf1_Aux" = "#D1C52A",
"Ctr9_Veh" = "#F7AE3F", "Ctr9_Aux" = "#CC9239", "Rtf1_Veh" = "#55CA61", "Rtf1_Aux" = "#409B4A",
"Cdc73_Veh" = "#549EFC", "Cdc73_Aux" = "#4586D9", "Leo1_Veh" = "#EE46E9", "Leo1_Aux" = "#CE3ECA",
"Wtos_AuxvsVeh" ="grey70", "Paf1_AuxvsVeh" = "#D1C52A", "Ctr9_AuxvsVeh" = "#CC9239",
"Rtf1_AuxvsVeh" = "#409B4A", "Cdc73_AuxvsVeh" = "#4586D9", "Leo1_AuxvsVeh" = "#CE3ECA",
"Wt_4tU" ="grey60", "paf1D_4tU" = "#9B921F", "rtf1D_4tU" = "#2B6A32",
"Paf1-AID" = "#F5E733", "Paf1-AID-osTIR" = "#D1C52A", "paf1D" = "#9B921F",
"Rtf1-AID" = "#55CA61", "Rtf1-AID-osTIR" = "#409B4A","rtf1D" = "#2B6A32",
"Ctr9-AID" = "#F7AE3F", "Ctr9-AID-osTIR" = "#CC9239","ctr9D" = "#A67831",
"Cdc73-AID" = "#549EFC","Cdc73-AID-osTIR" = "#4586D9","cdc73D" = "#3D6394",
"Leo1-AID" = "#EE46E9","Leo1-AID-osTIR" = "#CE3ECA","leo1D" = "#8E2A8B")
PhosphateReg <- c("PHO2", "ENA1", "VIP1", "PHM8", "YAR070C", "PPN2",
"YJL119C", "GIT1", "PHO4", "DDP1", "CBF1", "CTF19",
"ENA2", "PHO86", "GDE1", "VTC1", "PHO8", "PHM6", "SPL2",
"PHO81", "VTC4", "GPP2", "VTC2","PHO89", "PHO5", "VTC3",
"PHO84", "PHO12", "PHO11")
AftResponsive <- c("FIT3", "ARN1", "SIT1", "FIT2", "CCC2", "FIT1", "ARN2",
"CTH2", "FRE2", "FET5", "HMX1", "FRE1", "FET3", "FRE6",
"VHT1", "ARN4", "FRE5", "FRE3", "ATX1", "MRS4", "FTH1",
"FRE4", "FTR1", "SMF3", "COT1")
IronRegulon <-  c("AKR11", "ARN1", "ARN2", "ARN4", "ATX1", "BNA2", "CCC2", "COT1",
"CTH1", "CTH2", "ECM4", "FET3", "FET5", "FIT1", "FIT2", "FIT3",
"FRE1", "FRE2", "FRE3", "FRE4", "FRE5", "FRE6",
"FTH1", "FTR1", "HMX1", "ISU1", "MRS4", "SIT1", "SMF3", "VHT1")
# setwd("/Users/amf198/OneDrive - University of Pittsburgh/BioinformaticsFiles/OvationBatch4.1/DESeq2/")
load("OvationBatch4.1_DEseqAnalysis.RData")
write.csv(pombeSizeFactors, file = "sizeFactorsOvationBatch4.1.csv")
pombeSizeFactors
VolcPlot <- function(dataset, title){
data <- as.data.frame(dataset)
data$`-log10(padj)` <- -log10(data$padj)
size <- 3
l2fcCutoff <- 0.585 # 50% change
pCutoff <- 1.3 # -log(0.05) Cutoff
data <- mutate(data, color = case_when(data$log2FoldChange > l2fcCutoff & data$`-log10(padj)` > pCutoff ~ "Increased",
data$log2FoldChange < -l2fcCutoff & data$`-log10(padj)` > pCutoff ~ "Decreased",
(data$`-log10(padj)` < pCutoff | abs(data$log2FoldChange) < l2fcCutoff) ~ "nonsignificant"))
data <- mutate(data, regulon = case_when(rownames(data) %in% AftResponsive ~ "Iron Regulon",
rownames(data) %in% PhosphateReg ~ "Pho Regulon"))
gene_names <- rownames(dataset)
numbIncrease <- sum(data$color == "Increased")
numbDecrease <- sum(data$color == "Decreased")  # p <- ggplot(data, aes(x = log2FoldChange, y = padj, color = color)) +
p <- ggplot(data, aes(x = log2FoldChange, y = `-log10(padj)`, color = color)) +
ggtitle(label = paste0("Volcano Plot ", RNA), subtitle = title) +
geom_point(size = 2.5, alpha = 0.6, na.rm = T) +
#geom_text_repel(max.overlaps = 30) +
annotate( "text", label = paste(numbIncrease, " genes \nincreased"),
x = (size*(1.53)), y = (size*3), size = 3, colour = "black") +
annotate( "text", label = paste(numbDecrease, " genes \ndecreased"),
x = -(size*(1.53)), y = (size*3), size = 3, colour = "black") +
theme_minimal(base_size = 14) + # change overall theme
theme(legend.position = "nonw") + # change the legend
coord_cartesian(xlim = c(size*-3,size*3)) +
scale_color_manual(values=c("Decreased"="grey40", "Increased"="grey40", "nonsignificant"="grey")) +
geom_vline(xintercept=c(-l2fcCutoff, l2fcCutoff), col="darkgrey") +
geom_hline(yintercept = pCutoff, color = "darkgrey") + # Add p-adj value cutoff line
scale_y_continuous(trans = "log1p",
breaks = c(seq(1,5, by =1),seq(5,20, by =5),seq(20,80, by =10)), limits=c(0,400))  # Scale yaxis due to large p-values
# geom_text_repel(aes(label=ifelse((rownames(dataset) %in% AftResponsive ),
#                                  rownames(dataset),'')), fontface = "bold",
#                 hjust=-0.5, vjust=-0.5, size=3, color="black", alpha = 0.8)
# p <- p %+% geom_point(data=function(x){x[rownames(x) %in% c("PHO80","PHO82"),]},
#                       color = "green", size = 1.5)
#   geom_text_repel(aes(label=ifelse((rownames(dataset) %in% PhosphateReg ),
#                                    rownames(dataset),'')), fontface = "bold",
#                   hjust=1.5, vjust=-0.5, size=3, color="black", alpha = 0.8)
return(p)
}
contrast <- function(experiment, control){
comparison <- c("condition",experiment,control)
comparison <- na.omit(results(dds, comparison))
return(comparison)
}
CVCalc <- function(Rep1, Rep2){
data <- cbind(Rep1, Rep2) %>% apply(., 2, as.numeric)
SDs <- data %>% apply(., 1, sd)
Means <- rowMeans(data)
pcCVs <- SDs/Means*100
return(pcCVs)
}
correlationMatrixPlot <- function(data, title, corMethod){
data <- na.omit(data)
data_Long <- pivot_longer(data, -gene, names_to = "comparison", values_to = "log2Fc" )
correlationMatrix <- array(0, c(ncol(data)-1, ncol(data)-1),
dimnames = list(colnames(data)[-1],colnames(data)[-1]))
for (comparison1 in colnames(data)[-1]) {
for (comparison2 in colnames(data)[-1]){
comparison1_log2fc <- data_Long[data_Long$comparison == comparison1,]
comparison2_log2fc <- data_Long[data_Long$comparison == comparison2,]
cor <- cor(as.numeric(comparison1_log2fc$log2Fc), as.numeric(comparison2_log2fc$log2Fc), method = corMethod)
correlationMatrix[comparison1,comparison2] <- cor
}
}
pheatmap(correlationMatrix, display_numbers = T, main = title,
number_color = "black", fontsize = 25 )
}
dds <- list_DEseqAnalysis[["mRNA"]]$dds[[1]]
VolcPlot(contrast("Wtos_Aux", "Wtos_Veh"), "Wtos Aux vs Veh")
pdf(paste0("imgs/ncRNA/4tUBatch4.1_VolcanoPlots_AuxVsVeh_ncRNA_test", ".pdf"), height = 8, width = 15)
dds <- list_DEseqAnalysis[["mRNA"]]$dds[[1]]
p1 <- VolcPlot(contrast("Wtos_Aux", "Wtos_Veh"), "Wtos Aux vs Veh")
p2 <- VolcPlot(contrast("Paf1_Aux", "Paf1_Veh"), "Paf1 Aux vs Veh")
p3 <- VolcPlot(contrast("Ctr9_Aux", "Ctr9_Veh"), "Ctr9 Aux vs Veh")
p4 <- VolcPlot(contrast("Rtf1_Aux", "Rtf1_Veh"), "Rtf1 Aux vs Veh")
p5 <- VolcPlot(contrast("Cdc73_Aux", "Cdc73_Veh"), "Cdc73 Aux vs Veh")
p6 <- VolcPlot(contrast("Leo1_Aux", "Leo1_Veh"), "Leo1 Aux vs Veh")
grid.arrange(p1,p2,p3,p4,p5,p6,nrow = 3)
dev.off()
pdf(paste0("imgs/ncRNA/4tUBatch4.1_VolcanoPlots_AuxVsVeh_ncRNA_test", ".pdf"), height = 8, width = 10)
grid.arrange(p1,p2,p3,p4,p5,p6,nrow = 3)
dev.off()
pdf(paste0("imgs/ncRNA/4tUBatch4.1_VolcanoPlots_AuxVsVeh_ncRNA_test", ".pdf"), height = 15, width = 10)
grid.arrange(p1,p2,p3,p4,p5,p6,nrow = 3)
dev.off()
pdf(paste0("imgs/ncRNA/4tUBatch4.1_VolcanoPlots_AuxVsVeh_ncRNA_test", ".pdf"), height = 15, width = 15)
grid.arrange(p1,p2,p3,p4,p5,p6,nrow = 2)
dev.off()
pdf(paste0("imgs/ncRNA/4tUBatch4.1_VolcanoPlots_AuxVsVeh_ncRNA_test", ".pdf"), height = 15, width = 15)
grid.arrange(p1,p2,p3,p4,p5,p6,nrow = 1)
pdf(paste0("imgs/ncRNA/4tUBatch4.1_VolcanoPlots_AuxVsVeh_ncRNA_test", ".pdf"), height = 15, width = 30)
pdf(paste0("imgs/ncRNA/4tUBatch4.1_VolcanoPlots_AuxVsVeh_ncRNA_test", ".pdf"), height = 8, width = 30)
dev.off()
dev.off()
dev.off()
dev.off()
pdf(paste0("imgs/ncRNA/4tUBatch4.1_VolcanoPlots_AuxVsVeh_ncRNA_test", ".pdf"), height = 8, width = 30)
grid.arrange(p1,p2,p3,p4,p5,p6,nrow = 1)
dev.off()
setwd("~/Documents/GitHub/GrowthCurveAnalysis/GC_Data/")
library(tidyverse)
library(ggplot2)
library(lubridate)
library(inflection)
library(ggpattern)
#unique(GC_Data_Longer$Mutant)
cols <- c("WT" =  "grey60",
"Paf1-AID" = "#F5E733", "Paf1-AID-osTIR" = "#D1C52A", "paf1D" = "#9B921F", "Blank" =  "grey",
"Rtf1-AID" = "#55CA61", "Rtf1-AID-osTIR" = "#409B4A",  "rtf1D" = "#2B6A32",
"htz1D_Rtf1-AID" = "#48C9B0", "htz1D_Rtf1-AID-osTIR" = "#17A589",  "htz1D" = "#117864",
"Ctr9-AID" = "#F7AE3F", "Ctr9-AID-osTIR" = "#CC9239",  "ctr9D" = "#A67831",
"Cdc73-AID" = "#549EFC","Cdc73-AID-osTIR" = "#4586D9",  "cdc73D" = "#3D6394",
"Leo1-AID" = "#EE46E9","Leo1-AID-osTIR" = "#CE3ECA",  "leo1D" = "#8E2A8B",
"1" = "black", "2" = "red", "3" = "blue", "4" = "green" )
media <- c("YPD" = 1, "YPD_Aux" = 2, "YPD_Veh" = 3)
targetOrder <- c("Wt", "Paf1", "Ctr9", "Rtf1",
"Cdc73", "Leo1")
# Read in data key csv files here.
GC_Data_Key_1 <- read.csv("DataKeys/CtCdGCDataKey_001.csv", header = T, sep = ",")
GC_Data_Key_2 <- read.csv("DataKeys/PaRtGCDataKey_002.csv", header = T, sep = ",")
GC_Data_Key_2
GC_Data_Key_3 <- read.csv("DataKeys/PaRtGCDataKey_003.csv", header = T, sep = ",")
GC_Data_Key_4 <- read.csv("DataKeys/CtLeGCDataKey_004.csv", header = T, sep = ",")
GC_Data_Key_5 <- read.csv("DataKeys/RtRthGCDataKey_005.csv", header = T, sep = ",")
GC_Data_Key_6 <- read.csv("DataKeys/RthLeGCDataKey_006.csv", header = T, sep = ",")
GC_Data_Key_7 <- read.csv("DataKeys/CtCdGCDataKey_007.csv", header = T, sep = ",")
# Read in data csv files here.
GC_Data_1 <- read.csv("DataTables/CtCdGCData_001.csv", header = T, sep = ",")
GC_Data_2 <- read.csv("DataTables/PaRtGCData_002.csv", header = T, sep = ",")
GC_Data_1
# Note Wells G1 and G6 were dropped from original data of Plate 2 as they never reached saturation. Clearly a technical issue.
GC_Data_3 <- read.csv("DataTables/PaRtGCData_003.csv", header = T, sep = ",")
GC_Data_4 <- read.csv("DataTables/CtLeGCData_004.csv", header = T, sep = ",")
GC_Data_5 <- read.csv("DataTables/RtRthGCData_005.csv", header = T, sep = ",")
GC_Data_6 <- read.csv("DataTables/RthLeGCData_006.csv", header = T, sep = ",")
GC_Data_7 <- read.csv("DataTables/CtCdGCData_007.csv", header = T, sep = ",")
GC_Data_7
for (i in str_remove(ls(pattern="GC_Data_Key_", all.names = TRUE), "GC_Data_Key_")) {
print(paste("Plate ", i))
# the get(eval()) piece allows me to interpret a string as a variable, I use this
# to refer to variables with varying plate indices
tempDataKey <- get(eval(paste0("GC_Data_Key_", i)))
tempDataTable <- get(eval(paste0("GC_Data_", i)))
tempDataKey$Observation_Index <- paste(tempDataKey$Plate_Num, "_", tempDataKey$Well, sep = '')
tempDataKey$Condition <- paste(tempDataKey$Mutant, "_", tempDataKey$Media, sep = '')
tempDataKey$BioRep_Index <-  paste(tempDataKey$Condition, "_", tempDataKey$BioRep, sep = '')
# longifies data table to provide a "Well" column for merging with datakeys
tempDataTable <- pivot_longer(tempDataTable,
-Time,
names_to = "Well",
values_to = "OD600")
tempDataTable_Longer <-  merge(tempDataTable,
tempDataKey,
by.x = 'Well',
by.y = 'Well')
# this if else statement lets me make the variable GC_Data_Longer if it doesn't
# already exist. If it does, then I append the curent temptable to the growing
# combined data frame
if (exists("GC_Data_Longer")) {
print(dim(GC_Data_Longer))
GC_Data_Longer <- rbind(GC_Data_Longer, tempDataTable_Longer)
print(dim(GC_Data_Longer))
}  else {
GC_Data_Longer <- tempDataTable_Longer
print(dim(GC_Data_Longer))
}
}
GC_Data_Longer
eval(paste0("GC_Data_Key_", i)
)
tempDataTable
tempDataKey
tempDataTable
tempDataKey
merge(tempDataTable,
tempDataKey,
by.x = 'Well',
by.y = 'Well')
# Ties the genetic mutant to the biorep to keep track of which pairwise conditions came from the same colony/culture
GC_Data_Longer$Mutant_BioRep <- paste0(GC_Data_Longer$Mutant, "_" ,GC_Data_Longer$BioRep)
GC_Data_Longer
GC_Data_Longer
aggregate(OD600 ~ Time + Plate_Num + Condition + Target + Mutant + Media + BioRep_Index, data = GC_Data_Longer, mean)
aggregate(OD600 ~ Time + Plate_Num + Condition + Target + Mutant + Media + BioRep_Index, data = GC_Data_Longer, sd)
# Numerifies Time column and calculates mean by techincial and biological replicate
{
GC_Data_Longer$Time <- (as.numeric(hms(GC_Data_Longer$Time)))/(60*60)
# aggregate by time for everything but Observation Index to average multiple tech reps
GC_Data_Long <- aggregate(OD600 ~ Time + Plate_Num + Condition + Target + Mutant + Media + BioRep_Index, data = GC_Data_Longer, mean)
GC_Data_Long$sdByTechRep <- aggregate(OD600 ~ Time + Plate_Num + Condition + Target + Mutant + Media + BioRep_Index, data = GC_Data_Longer, sd)$OD600
GC_Data_Long$sdByTechRep[is.na(GC_Data_Long$sdByTechRep)] <- 0
# aggregate by time for everything but BioRep Index to average multiple biological reps
GC_Data_Reduced <- aggregate(OD600 ~ Time + Condition + Target + Mutant + Media , data = GC_Data_Long, mean)
GC_Data_Reduced$sdByBioRep <- aggregate(OD600 ~ Time + Condition + Target + Mutant + Media , data = GC_Data_Long, sd)$OD600
GC_Data_Reduced$ConditionByPlate <- paste(GC_Data_Reduced$Condition, GC_Data_Reduced$Plate_Num)
GC_Data_Reduced$sdByBioRep[is.na(GC_Data_Reduced$sdByBioRep)] <- 0
}
attach(GC_Data_Long)
attach(GC_Data_Long)
# Keeps an untrimmed version for posterity
GC_Data_Longer_Untrimmed <- GC_Data_Longer
# removes Rtf1-AID BioRep2 bc of wierdness
GC_Data_Longer <- GC_Data_Longer[GC_Data_Longer$Mutant_BioRep != "Rtf1-AID_2",]
GC_Data_Longer <- GC_Data_Longer[GC_Data_Longer$Mutant_BioRep != "Leo1-AID-osTIR_3",]
ggplot(GC_Data_Longer[GC_Data_Longer$Target != "Blank",], aes(x=Time, y=OD600, color = `Mutant`, group = `Observation_Index`)) +
geom_line(aes(linetype = `Media`), alpha=0.8, size = .7 ) + theme_bw(base_size = 15) +
scale_colour_manual(values = cols) +  xlim(0,25) +  ylim(0,2.5) + facet_wrap(~Mutant, ncol = 3)
# removes Rtf1-AID BioRep2 bc of wierdness
GC_Data_Longer <- GC_Data_Longer[GC_Data_Longer$Mutant_BioRep != "Rtf1-AID_2",]
GC_Data_Longer <- GC_Data_Longer[GC_Data_Longer$Mutant_BioRep != "Leo1-AID-osTIR_3",]
ggplot(GC_Data_Longer[GC_Data_Longer$Target != "Blank",], aes(x=Time, y=OD600, color = `Mutant`, group = `Observation_Index`)) +
geom_line(aes(linetype = `Media`), alpha=0.8, size = .7 ) + theme_bw(base_size = 15) +
scale_colour_manual(values = cols) +  xlim(0,25) +  ylim(0,2.5) + facet_wrap(~Mutant, ncol = 3)
ggplot(GC_Data_Long[GC_Data_Longer$Target != "Blank",], aes(x=Time, y=OD600, color = `Mutant`, group = `BioRep_Index`)) +
geom_line(aes(linetype = `Media`), alpha=0.8, size = 1 ) + theme_bw(base_size = 15) +
scale_colour_manual(values = cols) +  xlim(0,25) +  ylim(0,2.5) + facet_wrap(~Mutant, ncol = 3)
ggplot(GC_Data_Reduced[GC_Data_Reduced$Target != "Blank",], aes(x=Time, y=OD600, color = `Mutant`, group = ConditionByPlate)) +
geom_line(aes(linetype = `Media`), alpha=0.8, size = 1 ) + theme_bw(base_size = 15) + geom_ribbon(aes(ymin=(OD600 - sdByBioRep), ymax=(OD600 + sdByBioRep), alpha = .05), linetype="blank", alpha=0.2)+
scale_colour_manual(values = cols) + scale_fill_manual(values = cols)+  xlim(0,25) +  ylim(0,2.5) + facet_wrap(~Target, ncol = 3)
inflectionPointMatrix <- as.data.frame(GC_Data_Long[GC_Data_Long$Mutant != "Blank" & GC_Data_Long$Time > 1.9 & GC_Data_Long$Time < 20, ] %>%
group_by(BioRep_Index, Media) %>%
do({
y = as.vector(.$OD600)
x = as.vector(.$Time)
cc = check_curve(x,y)
ip = (bese(x,y,cc$index))
data.frame(curveType = cc$ctype, inflectionPoint = ip$iplast)
}))
inflectionPointMatrix
NoIPDatasets <- inflectionPointMatrix[rowSums(is.na(inflectionPointMatrix)) != 0,]
NoIPDatasets
inflectionPointMatrix <- inflectionPointMatrix[rowSums(is.na(inflectionPointMatrix)) == 0,]
inflectionPointMatrix <- inflectionPointMatrix[rowSums(is.na(inflectionPointMatrix)) == 0,]
inflectionPointMatrix
is.na(inflectionPointMatrix)) == 0
is.na(inflectionPointMatrix)
inflectionPointMatrix[rowSums(is.na(inflectionPointMatrix)) == 0,]
rowSums(is.na(inflectionPointMatrix))
inflectionPointMatrix[rowSums(is.na(inflectionPointMatrix)) == 0,]
inflectionPointMatrix <- inflectionPointMatrix[rowSums(is.na(inflectionPointMatrix)) == 0,]
NoIPDatasets
# plots IP-less curves for visual inspection
ggplot(GC_Data_Long[GC_Data_Long$BioRep_Index == NoIPDatasets$BioRep_Index,], aes(x=Time, y=OD600, color = `Mutant`, group = `BioRep_Index`)) +
geom_line(aes(linetype = `Media`), alpha=0.8, size = 1 ) + theme_bw(base_size = 15) +
scale_colour_manual(values = cols) +  xlim(0,25) +  ylim(0,2.5)
# visualizing the pieces of curves that will be
# transforming Datasets to align with midpoint at T = 14
GC_Data_Long_IP <- merge(GC_Data_Long, inflectionPointMatrix[,c(1,4)], by.x = 'BioRep_Index', by.y = 'BioRep_Index')
GC_Data_Long_IP$Time = (GC_Data_Long_IP$Time - GC_Data_Long_IP$inflectionPoint)
GC_Data_Long_IP$BioRep <- str_sub(GC_Data_Long_IP$BioRep_Index, -1)
GC_Data_Long_IP
# plotting the curves shifted to align with midpoints and with a grey rectangle highlighting the line segment used for extracting slopes
IPShifted_plot_log2 <- ggplot(GC_Data_Long_IP[GC_Data_Long_IP$Target != "Blank",], aes(x=Time, y=log2(OD600), color = `Mutant`, group = `BioRep_Index`)) +
geom_line(aes(linetype = `Media`), alpha=0.8, size = .5 ) + theme_bw(base_size = 8) +
scale_colour_manual(values = cols) +  xlim(-14,14) +  ylim(-4,2.5) + facet_wrap(~Mutant, ncol = 3) + geom_vline(xintercept = 0 ) +
annotate("rect", xmin = -4, xmax = -1, ymin = -4, ymax = 2.5,
alpha = .2)
IPShifted_plot_log2
IPShifted_plot <- ggplot(GC_Data_Long_IP[GC_Data_Long_IP$Target != "Blank",], aes(x=Time, y=OD600, color = `Mutant`, group = `BioRep_Index`)) +
geom_line(aes(linetype = `Media`), alpha=0.8, size = .5 ) + theme_bw(base_size = 8) +
scale_colour_manual(values = cols) +  xlim(-14,14) +  ylim(0,2.5) + facet_wrap(~Mutant, ncol = 3) + geom_vline(xintercept = 0 ) +
annotate("rect", xmin = -4, xmax = -1, ymin = 0, ymax = 2.5,
alpha = .2)
IPShifted_plot
GC_Long_IP <-  merge(GC_Data_Long, inflectionPointMatrix[,-2], by.x = 'BioRep_Index',  by.y = 'BioRep_Index' )
Data_subset <- GC_Long_IP[(GC_Long_IP$Time > (GC_Long_IP$inflectionPoint - 3.48) & GC_Long_IP$Time < (GC_Long_IP$inflectionPoint - 0.48)),]
# # Uncomment the lines below to check to see how your cut curves look
# full traces of untransformed data
allData_plot <- ggplot(GC_Data_Long[GC_Data_Long$Target != "Blank",], aes(x=Time, y=OD600, color = `Mutant`, group = `BioRep_Index`)) +
geom_line(aes(linetype = `Media`), alpha=0.8, size = .5 ) + theme_bw(base_size = 8) + geom_ribbon(aes(ymin=(OD600 - sdByTechRep), ymax=(OD600 + sdByTechRep), alpha = .2), linetype="blank", alpha=0.2)+
scale_colour_manual(values = cols) +  xlim(0,25) +  ylim(0,2.5) + facet_wrap(~Mutant, ncol = 3)
allData_plot
# making plate-specific plots to view tech rep data
for (i in unique(GC_Data_Longer$Plate_Num)) {
Plot_path <-  paste("../res/DataByPlate/PlatePlot_", i, ".pdf", sep = "")
print(Plot_path)
tempPlot <-  ggplot(GC_Data_Longer[GC_Data_Longer$Plate_Num == as.character(i) ,], aes(x=Time, y=OD600, color = as.factor(`BioRep`), group = `Observation_Index`)) +
geom_line(aes(linetype = `Media`), alpha=0.8, size = 1) + theme_bw(base_size = 16) +
ggtitle(paste0("Data from Plate ", i)) +
xlim(0,25) +  ylim(0,2.5) + facet_wrap(~Mutant)
ggsave(width = 10, height = 8, Plot_path, tempPlot)
}
slopes <- as.data.frame(Data_subset %>%
group_by(BioRep_Index, Mutant, Media, Target) %>%
do({
mod = lm(log2(OD600) ~ Time, data = .)
data.frame(Intercept = coef(mod)[1],
Slope = coef(mod)[2])
}))
slopes$DT <- (1/slopes$Slope)
DTMatrix <- as.data.frame(cbind(Mutant = slopes$Mutant,
BioRep_Index = str_remove( str_remove(str_remove(slopes$BioRep_Index, "_YPD"), "_Aux"),
"_Veh"),
Media = slopes$Media,
Target = slopes$Target,
DT = slopes$DT))
DTMatrix
DTMatrix$BioRep <- str_sub(DTMatrix$BioRep_Index, -1)
DTMatrix$DT <- as.numeric(DTMatrix$DT)
DTMatrix <- DTMatrix[order(DTMatrix$BioRep_Index),]
DTMatrix$Target <- factor(DTMatrix$Target,
levels = targetOrder)
DTMatrix
DTMatrix$BioRep <- str_sub(DTMatrix$BioRep_Index, -1)
DTMatrix$DT <- as.numeric(DTMatrix$DT)
DTMatrix <- DTMatrix[order(DTMatrix$BioRep_Index),]
DTMatrix$Target <- factor(DTMatrix$Target,
levels = targetOrder)
attach(DTMatrix)
DTMatrix
DTMatrix_avg <- DTMatrix %>%
group_by(Mutant, Media, Target) %>%
summarise(meanDT = mean(DT), sdDT = sd(DT) )
DT_plot <- ggplot(DTMatrix_avg[DTMatrix_avg$Mutant != "htz1D_Rtf1-AID-osTIR",], aes(x=Mutant, y=meanDT, group=Media, fill = Mutant, color = Media)) +
geom_col( width=0.7, position=position_dodge(), alpha = 1) +
geom_errorbar(aes(ymin=meanDT-sdDT, ymax=meanDT+sdDT), width=.2,
position=position_dodge(.7)) +
scale_fill_manual(values = cols) +
geom_point(data = DTMatrix[DTMatrix$Mutant != "htz1D_Rtf1-AID-osTIR",], aes(x=Mutant, y=DT, group=Media, fill = Mutant, color = Media, shape = as.factor(Media)),
position=position_dodge(.7) ) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_color_manual(values = c("grey10","grey10","grey10")) + theme(legend.position = "none")
DT_plot
DTMatrix
sampleOrder <- c("Wt", "Paf1", "Ctr9", "Rtf1",
"Cdc73", "Leo1",
"WT", "Paf1-AID", "Paf1-AID-osTIR", "paf1D",
"Rtf1-AID", "Rtf1-AID-osTIR",  "rtf1D" ,
"htz1D_Rtf1-AID", "htz1D_Rtf1-AID-osTIR" ,  "htz1D",
"Ctr9-AID", "Ctr9-AID-osTIR",  "ctr9D" ,
"Cdc73-AID","Cdc73-AID-osTIR",  "cdc73D" ,
"Leo1-AID","Leo1-AID-osTIR",  "leo1D" ,"Blank")
DTMatrix$Target <- factor(DTMatrix$Target,
levels = sampleOrder)
DTMatrix
DTMatrix$Mutant <- factor(DTMatrix$Mutant,
levels = sampleOrder)
DTMatrix_avg <- DTMatrix %>%
group_by(Mutant, Media, Target) %>%
summarise(meanDT = mean(DT), sdDT = sd(DT) )
DT_plot <- ggplot(DTMatrix_avg[DTMatrix_avg$Mutant != "htz1D_Rtf1-AID-osTIR",], aes(x=Mutant, y=meanDT, group=Media, fill = Mutant, color = Media)) +
geom_col( width=0.7, position=position_dodge(), alpha = 1) +
geom_errorbar(aes(ymin=meanDT-sdDT, ymax=meanDT+sdDT), width=.2,
position=position_dodge(.7)) +
scale_fill_manual(values = cols) +
geom_point(data = DTMatrix[DTMatrix$Mutant != "htz1D_Rtf1-AID-osTIR",], aes(x=Mutant, y=DT, group=Media, fill = Mutant, color = Media, shape = as.factor(Media)),
position=position_dodge(.7) ) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_color_manual(values = c("grey10","grey10","grey10")) + theme(legend.position = "none")
DT_plot
sampleOrder <- c("Wt", "Paf1", "Ctr9", "Rtf1",
"Cdc73", "Leo1",
"WT", "Paf1-AID", "Paf1-AID-osTIR", "paf1D",
"Ctr9-AID", "Ctr9-AID-osTIR",  "ctr9D" ,
"Rtf1-AID", "Rtf1-AID-osTIR",  "rtf1D" ,
"Cdc73-AID","Cdc73-AID-osTIR",  "cdc73D" ,
"Leo1-AID","Leo1-AID-osTIR",  "leo1D" ,
"htz1D_Rtf1-AID", "htz1D_Rtf1-AID-osTIR" ,  "htz1D", "Blank")
DTMatrix$Mutant <- factor(DTMatrix$Mutant,
levels = sampleOrder)
DTMatrix_avg <- DTMatrix %>%
group_by(Mutant, Media, Target) %>%
summarise(meanDT = mean(DT), sdDT = sd(DT) )
DT_plot <- ggplot(DTMatrix_avg[DTMatrix_avg$Mutant != "htz1D_Rtf1-AID-osTIR",], aes(x=Mutant, y=meanDT, group=Media, fill = Mutant, color = Media)) +
geom_col( width=0.7, position=position_dodge(), alpha = 1) +
geom_errorbar(aes(ymin=meanDT-sdDT, ymax=meanDT+sdDT), width=.2,
position=position_dodge(.7)) +
scale_fill_manual(values = cols) +
geom_point(data = DTMatrix[DTMatrix$Mutant != "htz1D_Rtf1-AID-osTIR",], aes(x=Mutant, y=DT, group=Media, fill = Mutant, color = Media, shape = as.factor(Media)),
position=position_dodge(.7) ) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_color_manual(values = c("grey10","grey10","grey10")) + theme(legend.position = "none")
DT_plot
diff <- DTMatrix[(Media == "YPD"),]$DT - DTMatrix[Media == "YPD_Aux",]$DT
DTDiffMatrix <- cbind(DTDiffMatrix, diff, YPD_DT = DTMatrix[Media == "YPD",]$DT)
DTDiffMatrix
# looking at data in a bio-rep paired manner
attach(DTMatrix)
diff <- DTMatrix[(Media == "YPD"),]$DT - DTMatrix[Media == "YPD_Aux",]$DT
